// *** WARNING: this file was generated by test. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package example

import (
	"context"
	"reflect"

	corev1 "github.com/pulumi/pulumi-kubernetes/sdk/v2/go/kubernetes/core/v1"
	"github.com/pulumi/pulumi/sdk/v2/go/pulumi"
)

type Workload struct {
	pulumi.CustomResourceState

	Pod corev1.PodOutput `pulumi:"pod"`
}

// NewWorkload registers a new resource with the given unique name, arguments, and options.
func NewWorkload(ctx *pulumi.Context,
	name string, args *WorkloadArgs, opts ...pulumi.ResourceOption) (*Workload, error) {
	if args == nil {
		args = &WorkloadArgs{}
	}

	var resource Workload
	err := ctx.RegisterResource("example::Workload", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetWorkload gets an existing Workload resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetWorkload(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *WorkloadState, opts ...pulumi.ResourceOption) (*Workload, error) {
	var resource Workload
	err := ctx.ReadResource("example::Workload", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering Workload resources.
type workloadState struct {
	Pod *corev1.Pod `pulumi:"pod"`
}

type WorkloadState struct {
	Pod corev1.PodInput
}

func (WorkloadState) ElementType() reflect.Type {
	return reflect.TypeOf((*workloadState)(nil)).Elem()
}

type workloadArgs struct {
}

// The set of arguments for constructing a Workload resource.
type WorkloadArgs struct {
}

func (WorkloadArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*workloadArgs)(nil)).Elem()
}

type WorkloadInput interface {
	pulumi.Input

	ToWorkloadOutput() WorkloadOutput
	ToWorkloadOutputWithContext(ctx context.Context) WorkloadOutput
}

type WorkloadPtrInput interface {
	pulumi.Input

	ToWorkloadPtrOutput() WorkloadPtrOutput
	ToWorkloadPtrOutputWithContext(ctx context.Context) WorkloadPtrOutput
}

func (Workload) ElementType() reflect.Type {
	return reflect.TypeOf((*Workload)(nil)).Elem()
}

func (i Workload) ToWorkloadOutput() WorkloadOutput {
	return i.ToWorkloadOutputWithContext(context.Background())
}

func (i Workload) ToWorkloadOutputWithContext(ctx context.Context) WorkloadOutput {
	return pulumi.ToOutputWithContext(ctx, i).(WorkloadOutput)
}

func (i Workload) ToWorkloadPtrOutput() WorkloadPtrOutput {
	return i.ToWorkloadPtrOutputWithContext(context.Background())
}

func (i Workload) ToWorkloadPtrOutputWithContext(ctx context.Context) WorkloadPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(WorkloadPtrOutput)
}

type WorkloadOutput struct {
	*pulumi.OutputState
}

func (WorkloadOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*WorkloadOutput)(nil)).Elem()
}

func (o WorkloadOutput) ToWorkloadOutput() WorkloadOutput {
	return o
}

func (o WorkloadOutput) ToWorkloadOutputWithContext(ctx context.Context) WorkloadOutput {
	return o
}

type WorkloadPtrOutput struct {
	*pulumi.OutputState
}

func (WorkloadPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Workload)(nil)).Elem()
}

func (o WorkloadPtrOutput) ToWorkloadPtrOutput() WorkloadPtrOutput {
	return o
}

func (o WorkloadPtrOutput) ToWorkloadPtrOutputWithContext(ctx context.Context) WorkloadPtrOutput {
	return o
}

func init() {
	pulumi.RegisterOutputType(WorkloadOutput{})
	pulumi.RegisterOutputType(WorkloadPtrOutput{})
}
